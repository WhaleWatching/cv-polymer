(function() {
  var global_string;

  global_string = 'haha';

  (function() {
    var global, transition;
    global = {};
    transition = {
      r: 64,
      rv: 1,
      g: 64,
      gv: 1,
      b: 64,
      bv: 1
    };
    return Polymer('cv-serv-global', {
      ready: function() {
        var toColor;
        this.global = global;
        this.global.data = '';
        toColor = function(r, g, b) {
          return 'rgb(' + [r, g, b].join(',') + ')';
        };
        window.setInterval(function() {
          if (transition.r > 192) {
            transition.rv = -1;
          }
          if (transition.r < 65) {
            transition.rv = 1;
          }
          transition.r += transition.rv;
          return global.data = toColor(transition.r, transition.g, transition.b);
        }, 15);
        window.setInterval(function() {
          if (transition.g > 192) {
            transition.gv = -1;
          }
          if (transition.g < 65) {
            transition.gv = 1;
          }
          transition.g += transition.gv;
          return global.data = toColor(transition.r, transition.g, transition.b);
        }, 30);
        return window.setInterval(function() {
          if (transition.b > 192) {
            transition.bv = -1;
          }
          if (transition.b < 65) {
            transition.bv = 1;
          }
          transition.b += transition.bv;
          return global.data = toColor(transition.r, transition.g, transition.b);
        }, 45);
      }
    });
  })();

  Polymer('cv-input', {
    ready: function() {
      return this.global = this.$['serv-global'].global;
    }
  });

  Polymer('cv-show', {
    ready: function() {
      return this.global = this.$['serv-global'].global;
    }
  });

  Polymer('cv-awesome', {
    ready: function() {
      return this.global = this.$['serv-global'].global;
    }
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN2LmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTtBQUFBLE1BQUEsYUFBQTs7QUFBQSxFQUFBLGFBQUEsR0FBZ0IsTUFBaEIsQ0FBQTs7QUFBQSxFQUVBLENBQUMsU0FBQSxHQUFBO0FBQ0MsUUFBQSxrQkFBQTtBQUFBLElBQUEsTUFBQSxHQUFTLEVBQVQsQ0FBQTtBQUFBLElBQ0EsVUFBQSxHQUNFO0FBQUEsTUFBQSxDQUFBLEVBQUcsRUFBSDtBQUFBLE1BQ0EsRUFBQSxFQUFJLENBREo7QUFBQSxNQUVBLENBQUEsRUFBRyxFQUZIO0FBQUEsTUFHQSxFQUFBLEVBQUksQ0FISjtBQUFBLE1BSUEsQ0FBQSxFQUFHLEVBSkg7QUFBQSxNQUtBLEVBQUEsRUFBSSxDQUxKO0tBRkYsQ0FBQTtXQVFBLE9BQUEsQ0FBUSxnQkFBUixFQUEwQjtBQUFBLE1BQ3RCLEtBQUEsRUFBTyxTQUFBLEdBQUE7QUFDTCxZQUFBLE9BQUE7QUFBQSxRQUFBLElBQUMsQ0FBQSxNQUFELEdBQVUsTUFBVixDQUFBO0FBQUEsUUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsR0FBZSxFQURmLENBQUE7QUFBQSxRQUdBLE9BQUEsR0FBVSxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxHQUFBO0FBQ1IsaUJBQU8sTUFBQSxHQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLENBQVMsQ0FBQyxJQUFWLENBQWUsR0FBZixDQUFULEdBQStCLEdBQXRDLENBRFE7UUFBQSxDQUhWLENBQUE7QUFBQSxRQU1BLE1BQU0sQ0FBQyxXQUFQLENBQ0UsU0FBQSxHQUFBO0FBQ0UsVUFBQSxJQUFHLFVBQVUsQ0FBQyxDQUFYLEdBQWUsR0FBbEI7QUFDRSxZQUFBLFVBQVUsQ0FBQyxFQUFYLEdBQWdCLENBQUEsQ0FBaEIsQ0FERjtXQUFBO0FBRUEsVUFBQSxJQUFHLFVBQVUsQ0FBQyxDQUFYLEdBQWUsRUFBbEI7QUFDRSxZQUFBLFVBQVUsQ0FBQyxFQUFYLEdBQWdCLENBQWhCLENBREY7V0FGQTtBQUFBLFVBSUEsVUFBVSxDQUFDLENBQVgsSUFBZ0IsVUFBVSxDQUFDLEVBSjNCLENBQUE7aUJBS0EsTUFBTSxDQUFDLElBQVAsR0FBYyxPQUFBLENBQVEsVUFBVSxDQUFDLENBQW5CLEVBQXNCLFVBQVUsQ0FBQyxDQUFqQyxFQUFvQyxVQUFVLENBQUMsQ0FBL0MsRUFOaEI7UUFBQSxDQURGLEVBUUUsRUFSRixDQU5BLENBQUE7QUFBQSxRQWdCQSxNQUFNLENBQUMsV0FBUCxDQUNFLFNBQUEsR0FBQTtBQUNFLFVBQUEsSUFBRyxVQUFVLENBQUMsQ0FBWCxHQUFlLEdBQWxCO0FBQ0UsWUFBQSxVQUFVLENBQUMsRUFBWCxHQUFnQixDQUFBLENBQWhCLENBREY7V0FBQTtBQUVBLFVBQUEsSUFBRyxVQUFVLENBQUMsQ0FBWCxHQUFlLEVBQWxCO0FBQ0UsWUFBQSxVQUFVLENBQUMsRUFBWCxHQUFnQixDQUFoQixDQURGO1dBRkE7QUFBQSxVQUlBLFVBQVUsQ0FBQyxDQUFYLElBQWdCLFVBQVUsQ0FBQyxFQUozQixDQUFBO2lCQUtBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsT0FBQSxDQUFRLFVBQVUsQ0FBQyxDQUFuQixFQUFzQixVQUFVLENBQUMsQ0FBakMsRUFBb0MsVUFBVSxDQUFDLENBQS9DLEVBTmhCO1FBQUEsQ0FERixFQVFFLEVBUkYsQ0FoQkEsQ0FBQTtlQTBCQSxNQUFNLENBQUMsV0FBUCxDQUNFLFNBQUEsR0FBQTtBQUNFLFVBQUEsSUFBRyxVQUFVLENBQUMsQ0FBWCxHQUFlLEdBQWxCO0FBQ0UsWUFBQSxVQUFVLENBQUMsRUFBWCxHQUFnQixDQUFBLENBQWhCLENBREY7V0FBQTtBQUVBLFVBQUEsSUFBRyxVQUFVLENBQUMsQ0FBWCxHQUFlLEVBQWxCO0FBQ0UsWUFBQSxVQUFVLENBQUMsRUFBWCxHQUFnQixDQUFoQixDQURGO1dBRkE7QUFBQSxVQUlBLFVBQVUsQ0FBQyxDQUFYLElBQWdCLFVBQVUsQ0FBQyxFQUozQixDQUFBO2lCQUtBLE1BQU0sQ0FBQyxJQUFQLEdBQWMsT0FBQSxDQUFRLFVBQVUsQ0FBQyxDQUFuQixFQUFzQixVQUFVLENBQUMsQ0FBakMsRUFBb0MsVUFBVSxDQUFDLENBQS9DLEVBTmhCO1FBQUEsQ0FERixFQVFFLEVBUkYsRUEzQks7TUFBQSxDQURlO0tBQTFCLEVBVEQ7RUFBQSxDQUFELENBQUEsQ0FBQSxDQUZBLENBQUE7O0FBQUEsRUFvREEsT0FBQSxDQUFRLFVBQVIsRUFBb0I7QUFBQSxJQUNoQixLQUFBLEVBQU8sU0FBQSxHQUFBO2FBQ0wsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFDLENBQUEsQ0FBRSxDQUFBLGFBQUEsQ0FBYyxDQUFDLE9BRHZCO0lBQUEsQ0FEUztHQUFwQixDQXBEQSxDQUFBOztBQUFBLEVBeURBLE9BQUEsQ0FBUSxTQUFSLEVBQW1CO0FBQUEsSUFDZixLQUFBLEVBQU8sU0FBQSxHQUFBO2FBQ0wsSUFBQyxDQUFBLE1BQUQsR0FBVSxJQUFDLENBQUEsQ0FBRSxDQUFBLGFBQUEsQ0FBYyxDQUFDLE9BRHZCO0lBQUEsQ0FEUTtHQUFuQixDQXpEQSxDQUFBOztBQUFBLEVBOERBLE9BQUEsQ0FBUSxZQUFSLEVBQXNCO0FBQUEsSUFDbEIsS0FBQSxFQUFPLFNBQUEsR0FBQTthQUNMLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLENBQUUsQ0FBQSxhQUFBLENBQWMsQ0FBQyxPQUR2QjtJQUFBLENBRFc7R0FBdEIsQ0E5REEsQ0FBQTtBQUFBIiwiZmlsZSI6ImN2LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiIyBGb3IgRWR3YXJkIENoZW5nJ3MgQ1ZcclxuXHJcbmdsb2JhbF9zdHJpbmcgPSAnaGFoYSdcclxuXHJcbigoKSAtPlxyXG4gIGdsb2JhbCA9IHt9XHJcbiAgdHJhbnNpdGlvbiA9XHJcbiAgICByOiA2NFxyXG4gICAgcnY6IDFcclxuICAgIGc6IDY0XHJcbiAgICBndjogMVxyXG4gICAgYjogNjRcclxuICAgIGJ2OiAxXHJcbiAgUG9seW1lciAnY3Ytc2Vydi1nbG9iYWwnLCB7XHJcbiAgICAgIHJlYWR5OiAoKSAtPlxyXG4gICAgICAgIEBnbG9iYWwgPSBnbG9iYWxcclxuICAgICAgICBAZ2xvYmFsLmRhdGEgPSAnJ1xyXG5cclxuICAgICAgICB0b0NvbG9yID0gKHIsIGcsIGIpIC0+XHJcbiAgICAgICAgICByZXR1cm4gJ3JnYignICsgW3IsIGcsIGJdLmpvaW4oJywnKSArICcpJ1xyXG5cclxuICAgICAgICB3aW5kb3cuc2V0SW50ZXJ2YWwoXHJcbiAgICAgICAgICAoKSAtPlxyXG4gICAgICAgICAgICBpZiB0cmFuc2l0aW9uLnIgPiAxOTJcclxuICAgICAgICAgICAgICB0cmFuc2l0aW9uLnJ2ID0gLTFcclxuICAgICAgICAgICAgaWYgdHJhbnNpdGlvbi5yIDwgNjVcclxuICAgICAgICAgICAgICB0cmFuc2l0aW9uLnJ2ID0gMVxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uLnIgKz0gdHJhbnNpdGlvbi5ydlxyXG4gICAgICAgICAgICBnbG9iYWwuZGF0YSA9IHRvQ29sb3IodHJhbnNpdGlvbi5yLCB0cmFuc2l0aW9uLmcsIHRyYW5zaXRpb24uYilcclxuICAgICAgICAgIDE1XHJcbiAgICAgICAgKVxyXG4gICAgICAgIHdpbmRvdy5zZXRJbnRlcnZhbChcclxuICAgICAgICAgICgpIC0+XHJcbiAgICAgICAgICAgIGlmIHRyYW5zaXRpb24uZyA+IDE5MlxyXG4gICAgICAgICAgICAgIHRyYW5zaXRpb24uZ3YgPSAtMVxyXG4gICAgICAgICAgICBpZiB0cmFuc2l0aW9uLmcgPCA2NVxyXG4gICAgICAgICAgICAgIHRyYW5zaXRpb24uZ3YgPSAxXHJcbiAgICAgICAgICAgIHRyYW5zaXRpb24uZyArPSB0cmFuc2l0aW9uLmd2XHJcbiAgICAgICAgICAgIGdsb2JhbC5kYXRhID0gdG9Db2xvcih0cmFuc2l0aW9uLnIsIHRyYW5zaXRpb24uZywgdHJhbnNpdGlvbi5iKVxyXG4gICAgICAgICAgMzBcclxuICAgICAgICApXHJcbiAgICAgICAgd2luZG93LnNldEludGVydmFsKFxyXG4gICAgICAgICAgKCkgLT5cclxuICAgICAgICAgICAgaWYgdHJhbnNpdGlvbi5iID4gMTkyXHJcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbi5idiA9IC0xXHJcbiAgICAgICAgICAgIGlmIHRyYW5zaXRpb24uYiA8IDY1XHJcbiAgICAgICAgICAgICAgdHJhbnNpdGlvbi5idiA9IDFcclxuICAgICAgICAgICAgdHJhbnNpdGlvbi5iICs9IHRyYW5zaXRpb24uYnZcclxuICAgICAgICAgICAgZ2xvYmFsLmRhdGEgPSB0b0NvbG9yKHRyYW5zaXRpb24uciwgdHJhbnNpdGlvbi5nLCB0cmFuc2l0aW9uLmIpXHJcbiAgICAgICAgICA0NVxyXG4gICAgICAgIClcclxuICAgIH1cclxuICApKClcclxuXHJcblBvbHltZXIgJ2N2LWlucHV0Jywge1xyXG4gICAgcmVhZHk6ICgpIC0+XHJcbiAgICAgIEBnbG9iYWwgPSBAJFsnc2Vydi1nbG9iYWwnXS5nbG9iYWxcclxuICB9XHJcblxyXG5Qb2x5bWVyICdjdi1zaG93Jywge1xyXG4gICAgcmVhZHk6ICgpIC0+XHJcbiAgICAgIEBnbG9iYWwgPSBAJFsnc2Vydi1nbG9iYWwnXS5nbG9iYWxcclxuICB9XHJcblxyXG5Qb2x5bWVyICdjdi1hd2Vzb21lJywge1xyXG4gICAgcmVhZHk6ICgpIC0+XHJcbiAgICAgIEBnbG9iYWwgPSBAJFsnc2Vydi1nbG9iYWwnXS5nbG9iYWxcclxuICB9Il19